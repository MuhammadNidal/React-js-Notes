                 
                 
                   =============>>>>>>>>>>>            React.js Guide           <<<<<<<<<<<<=================
Introduction
React.js is a JavaScript library for building user interfaces. It allows developers to create large web applications that can update and render efficiently in response to data changes.

What is React?
React: A JavaScript library for building user interfaces.
Component-Based: Builds encapsulated components that manage their own state.
Declarative: Creates interactive UIs with simple views for each state in the application.
Learn Once, Write Anywhere: Develop new features in React without rewriting existing code.
Basic Concepts
JSX: A syntax extension for JavaScript that looks similar to HTML.
Components: Independent, reusable pieces of UI.
Props: Inputs to components that allow data to be passed and shared.
State: An object that determines how components render and behave.
Setting Up React
Create a New React App
Using Create React App (CRA):

bash
Copy code
npx create-react-app my-app
cd my-app
npm start
Folder Structure
java
Copy code
my-app/
├── node_modules/
├── public/
├── src/
│   ├── components/
│   ├── App.js
│   ├── index.js
│   ├── styles.css
├── .gitignore
├── package.json
└── README.md
JSX
Syntax and Basics
JSX allows you to write HTML in React.

jsx
Copy code
const element = <h1>Hello, world!</h1>;
Embedding Expressions
You can embed any JavaScript expression in JSX by wrapping it in curly braces {}.

jsx
Copy code
const name = 'Josh Perez';
const element = <h1>Hello, {name}</h1>;
Components
Function Components
A function component is a JavaScript function that returns a React element.


jsx
Copy code
function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
}
Class Components
A class component requires you to extend from React.Component and create a render function.

jsx
Copy code
class Welcome extends React.Component {
    render() {
        return <h1>Hello, {this.props.name}</h1>;
    }
}
Props
Props are used to pass data from one component to another.

jsx
Copy code
function Greeting(props) {
    return <h1>Hello, {props.name}</h1>;
}

const element = <Greeting name="Sara" />;
State
State is a built-in object used to store property values that belong to the component.

Using State in Class Components
jsx
Copy code
class Clock extends React.Component {
    constructor(props) {
        super(props);
        this.state = { date: new Date() };
    }

    render() {
        return (
            <div>
                <h1>It is {this.state.date.toLocaleTimeString()}.</h1>
            </div>
        );
    }
}
Using State in Function Components (Hooks)
jsx
Copy code
import React, { useState } from 'react';

function Example() {
    const [count, setCount] = useState(0);

    return (
        <div>
            <p>You clicked {count} times</p>
            <button onClick={() => setCount(count + 1)}>
                Click me
            </button>
        </div>
    );
}
Lifecycle Methods
Lifecycle methods are special methods in class components that are executed at different stages of the component's life.

Mounting
componentDidMount(): Called after the component is rendered.
Updating
componentDidUpdate(prevProps, prevState): Called after the component is updated.
Unmounting
componentWillUnmount(): Called just before the component is unmounted and destroyed.
Event Handling
Handling events with React elements is very similar to handling events on DOM elements.

jsx
Copy code
function ActionLink() {
    function handleClick(e) {
        e.preventDefault();
        console.log('The link was clicked.');
    }

    return (
        <a href="#" onClick={handleClick}>
            Click me
        </a>
    );
}
Conditional Rendering
You can create distinct components that encapsulate behavior you need.

Using if-else
jsx
Copy code
function Greeting(props) {
    const isLoggedIn = props.isLoggedIn;
    if (isLoggedIn) {
        return <h1>Welcome back!</h1>;
    }
    return <h1>Please sign up.</h1>;
}
Using Ternary Operator
jsx
Copy code
const isLoggedIn = true;
return (
    <div>
        {isLoggedIn ? <h1>Welcome back!</h1> : <h1>Please sign up.</h1>}
    </div>
);
Lists and Keys
Rendering Lists
Use the map() method to render lists.

jsx
Copy code
function NumberList(props) {
    const numbers = props.numbers;
    const listItems = numbers.map((number) =>
        <li key={number.toString()}>
            {number}
        </li>
    );
    return (
        <ul>{listItems}</ul>
    );
}
Keys
Keys help React identify which items have changed.

jsx
Copy code
const numbers = [1, 2, 3, 4, 5];
const listItems = numbers.map((number) =>
    <li key={number.toString()}>
        {number}
    </li>
);
Forms
Forms in React are similar to HTML forms, but you need to handle the form state yourself.

Controlled Components
jsx
Copy code
class NameForm extends React.Component {
    constructor(props) {
        super(props);
        this.state = { value: '' };

        this.handleChange = this.handleChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
    }

    handleChange(event) {
        this.setState({ value: event.target.value });
    }

    handleSubmit(event) {
        alert('A name was submitted: ' + this.state.value);
        event.preventDefault();
    }

    render() {
        return (
            <form onSubmit={this.handleSubmit}>
                <label>
                    Name:
                    <input type="text" value={this.state.value} onChange={this.handleChange} />
                </label>
                <input type="submit" value="Submit" />
            </form>
        );
    }
}
Lifting State Up
To share state between components, you need to move the state up to their closest common ancestor.

jsx
Copy code
function BoilingVerdict(props) {
    if (props.celsius >= 100) {
        return <p>The water would boil.</p>;
    }
    return <p>The water would not boil.</p>;
}

class Calculator extends React.Component {
    constructor(props) {
        super(props);
        this.state = { temperature: '' };

        this.handleChange = this.handleChange.bind(this);
    }

    handleChange(e) {
        this.setState({ temperature: e.target.value });
    }

    render() {
        const temperature = this.state.temperature;
        return (
            <fieldset>
                <legend>Enter temperature in Celsius:</legend>
                <input
                    value={temperature}
                    onChange={this.handleChange} />
                <BoilingVerdict
                    celsius={parseFloat(temperature)} />
            </fieldset>
        );
    }
}
React Router
React Router is a library for routing in React applications.

Installation
bash
Copy code
npm install react-router-dom
Basic Usage
jsx
Copy code
import { BrowserRouter as Router, Route, Link } from 'react-router-dom';

function App() {
    return (
        <Router>
            <div>
                <nav>
                    <ul>
                        <li>
                            <Link to="/">Home</Link>
                        </li>
                        <li>
                            <Link to="/about">About</Link>
                        </li>
                        <li>
                            <Link to="/contact">Contact</Link>
                        </li>
                    </ul>
                </nav>

                <Route path="/" exact component={Home} />
                <Route path="/about" component={About} />
                <Route path="/contact" component={Contact} />
            </div>
        </Router>
    );
}

function Home() {
    return <h2>Home</h2>;
}

function About() {
    return <h2>About</h2>;
}

function Contact() {
    return <h2>Contact</h2>;
}
React Context API
Context API provides a way to pass data through the component tree without having to pass props down manually at every level.

Creating Context
jsx
Copy code
const ThemeContext = React.createContext('light');

function App() {
    return (
        <ThemeContext.Provider value="dark">
            <Toolbar />
        </ThemeContext.Provider>
    );
}

function Toolbar() {
    return (
        <div>
            <ThemedButton />
        </div>
    );
}

function ThemedButton() {
    return (
        <ThemeContext.Consumer>
            {theme => <button className={theme}>Theme Button</button>}
        </ThemeContext.Consumer>
    );
}
React Redux (Toolkit)
React Redux is a library for managing application state.

Installation
bash
Copy code
npm install @reduxjs/toolkit react-redux
Setting Up Redux
jsx
Copy code
import { configureStore } from '@reduxjs/toolkit';
import { Provider } from 'react-redux';

const store = configureStore({
    reducer: {
        // your reducers here
    }
});

function App() {
    return (
        <Provider store={store}>
            <MyComponent />
        </Provider>
    );
}
Creating a Slice
jsx
Copy code
import { createSlice } from '@reduxjs/toolkit';

const counterSlice = createSlice({
    name: 'counter',
    initialState: { value: 0 },
    reducers: {
        increment: state => { state.value += 1 },
        decrement: state => { state.value -= 1 }
    }
});

export const { increment, decrement } = counterSlice.actions;
export default counterSlice.reducer;
Using Redux State and Dispatch in Components
jsx
Copy code
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement } from './counterSlice';

function Counter() {
    const count = useSelector(state => state.counter.value);
    const dispatch = useDispatch();

    return (
        <div>
            <button onClick={() => dispatch(decrement())}>-</button>
            <span>{count}</span>
            <button onClick={() => dispatch(increment())}>+</button>
        </div>
    );
}
Folder Structure for GitHub
You can organize the notes in a structured manner by creating folders and files for each section. Here's an example of how you might organize the files:

perl
Copy code
reactjs-guide/
├── 01-introduction/
│   ├── index.html
│   ├── jsx.html
│   ├── components.html
│   ├── props.html
│   ├── state.html
│   ├── lifecycle.html
│   ├── events.html
│   ├── conditional-rendering.html
│   ├── lists-and-keys.html
│   ├── forms.html
│   ├── lifting-state-up.html
├── 02-advanced-topics/
│   ├── context-api.html
│   ├── react-router.html
│   ├── react-redux.html
├── index.html
└── styles.css
Example of a Detailed React Section File (01-introduction/jsx.html)
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JSX in React</title>
    <link rel="stylesheet" href="../styles.css">
</head>
<body>
    <header>
        <h1>JSX in React</h1>
    </header>
    <main>
        <section>
            <h2>What is JSX?</h2>
            <p>JSX is a syntax extension for JavaScript that looks similar to HTML. It is used with React to describe what the UI should look like.</p>
        </section>
        <section>
            <h2>Embedding Expressions in JSX</h2>
            <p>In JSX, you can embed any JavaScript expression by wrapping it in curly braces `{}`.</p>
            <pre><code>
const name = 'Josh Perez';
const element = <h1>Hello, {name}</h1>;
            </code></pre>
        </section>
        <section>
            <h2>JSX is an Expression Too</h2>
            <p>After compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects.</p>
            <pre><code>
const element = <h1 className="greeting">Hello, world!</h1>;
            </code></pre>
        </section>
        <section>
            <h2>Specifying Attributes with JSX</h2>
            <p>You can use quotes to specify string literals as attributes, and curly braces to embed a JavaScript expression in an attribute.</p>
            <pre><code>
const element = <img src={user.avatarUrl}></img>;
            </code></pre>
        </section>
    </main>
    <footer>
        <p>&copy; 2024 React.js Guide</p>
    </footer>
</body>
</html>
Example of Index File (index.html)
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React.js Guide</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>React.js Guide</h1>
    </header>
    <nav>
        <ul>
            <li><a href="01-introduction/index.html">Introduction to React</a></li>
            <li><a href="02-advanced-topics/context-api.html">Context API</a></li>
            <li><a href="02-advanced-topics/react-router.html">React Router</a></li>
            <li><a href="02-advanced-topics/react-redux.html">React Redux</a></li>
        </ul>
    </nav>
    <footer>
        <p>&copy; 2024 React.js Guide</p>
    </footer>
</body>
</html>
This structure will help you organize your React.js notes in a clear and accessible way, similar to the approach used by W3Schools. Each file in the 01-introduction and 02-advanced-topics folders will cover a specific topic, making it easier for users to navigate and learn. Feel free to customize and expand the content as needed!


React Components
What are Components?
Components are the building blocks of a React application. They allow you to split the UI into independent, reusable pieces that can be managed separately.

Function Components
A function component is a JavaScript function that returns a React element. It's the simplest way to create a component.

jsx
Copy code
function Greeting(props) {
    return <h1>Hello, {props.name}!</h1>;
}

const element = <Greeting name="Sara" />;
Class Components
A class component requires you to extend React.Component and define a render method.

jsx
Copy code
class Greeting extends React.Component {
    render() {
        return <h1>Hello, {this.props.name}!</h1>;
    }
}

const element = <Greeting name="Sara" />;
Props
What are Props?
Props (short for "properties") are read-only attributes used to pass data from a parent component to a child component.

Passing Props
Props are passed to components similarly to how attributes are passed to HTML elements.

jsx
Copy code
function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
}

const element = <Welcome name="Sara" />;
Default Props
You can define default props using the defaultProps property on the component.

jsx
Copy code
class Welcome extends React.Component {
    static defaultProps = {
        name: 'Stranger'
    };

    render() {
        return <h1>Hello, {this.props.name}</h1>;
    }
}

const element = <Welcome />;
State
What is State?
State is a built-in object in React components that allows the component to keep track of data that changes over time. Unlike props, state is managed within the component and can change based on user interactions or other events.

Using State in Class Components
State is initialized in the constructor and updated using setState.

jsx
Copy code
class Clock extends React.Component {
    constructor(props) {
        super(props);
        this.state = { date: new Date() };
    }

    componentDidMount() {
        this.timerID = setInterval(
            () => this.tick(),
            1000
        );
    }

    componentWillUnmount() {
        clearInterval(this.timerID);
    }

    tick() {
        this.setState({
            date: new Date()
        });
    }

    render() {
        return (
            <div>
                <h1>Hello, world!</h1>
                <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
            </div>
        );
    }
}
Using State in Function Components (Hooks)
The useState Hook allows you to add state to function components.

jsx
Copy code
import React, { useState } from 'react';

function Counter() {
    const [count, setCount] = useState(0);

    return (
        <div>
            <p>You clicked {count} times</p>
            <button onClick={() => setCount(count + 1)}>
                Click me
            </button>
        </div>
    );
}
React Router
React Router is a standard library for routing in React. It enables navigation among views of various components in a React application.

Installation
bash
Copy code
npm install react-router-dom
Basic Usage
jsx
Copy code
import { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';

function Home() {
    return <h2>Home</h2>;
}

function About() {
    return <h2>About</h2>;
}

function App() {
    return (
        <Router>
            <div>
                <nav>
                    <ul>
                        <li><Link to="/">Home</Link></li>
                        <li><Link to="/about">About</Link></li>
                    </ul>
                </nav>

                <Switch>
                    <Route path="/about">
                        <About />
                    </Route>
                    <Route path="/">
                        <Home />
                    </Route>
                </Switch>
            </div>
        </Router>
    );
}

export default App;
React Context API
Context API provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.

Creating Context
jsx
Copy code
const ThemeContext = React.createContext('light');

function App() {
    return (
        <ThemeContext.Provider value="dark">
            <Toolbar />
        </ThemeContext.Provider>
    );
}

function Toolbar() {
    return (
        <div>
            <ThemedButton />
        </div>
    );
}

function ThemedButton() {
    return (
        <ThemeContext.Consumer>
            {theme => <button className={theme}>Theme Button</button>}
        </ThemeContext.Consumer>
    );
}
React Redux (Toolkit)
React Redux is a library for managing and centralizing application state.

Installation
bash
Copy code
npm install @reduxjs/toolkit react-redux
Setting Up Redux
jsx
Copy code
import { configureStore } from '@reduxjs/toolkit';
import { Provider } from 'react-redux';

const store = configureStore({
    reducer: {
        // your reducers here
    }
});

function App() {
    return (
        <Provider store={store}>
            <MyComponent />
        </Provider>
    );
}
Creating a Slice
jsx
Copy code
import { createSlice } from '@reduxjs/toolkit';

const counterSlice = createSlice({
    name: 'counter',
    initialState: { value: 0 },
    reducers: {
        increment: state => { state.value += 1 },
        decrement: state => { state.value -= 1 }
    }
});

export const { increment, decrement } = counterSlice.actions;
export default counterSlice.reducer;
Using Redux State and Dispatch in Components
jsx
Copy code
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement } from './counterSlice';

function Counter() {
    const count = useSelector(state => state.counter.value);
    const dispatch = useDispatch();

    return (
        <div>
            <button onClick={() => dispatch(decrement())}>-</button>
            <span>{count}</span>
            <button onClick={() => dispatch(increment())}>+</button>
        </div>
    );
}
Folder Structure for GitHub
You can organize the notes in a structured manner by creating folders and files for each section. Here's an example of how you might organize the files:

perl
Copy code
reactjs-guide/
├── 01-introduction/
│   ├── index.html
│   ├── jsx.html
│   ├── components.html
│   ├── props.html
│   ├── state.html
│   ├── lifecycle.html
│   ├── events.html
│   ├── conditional-rendering.html
│   ├── lists-and-keys.html
│   ├── forms.html
│   ├── lifting-state-up.html
├── 02-advanced-topics/
│   ├── context-api.html
│   ├── react-router.html
│   ├── react-redux.html
├── index.html
└── styles.css
Example of a Detailed React Section File (01-introduction/props.html)
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Props in React</title>
    <link rel="stylesheet" href="../styles.css">
</head>
<body>
    <header>
        <h1>Props in React</h1>
    </header>
    <main>
        <section>
            <h2>What are Props?</h2>
            <p>Props (short for "properties") are read-only attributes used to pass data from a parent component to a child component.</p>
        </section>
        <section>
            <h2>Passing Props</h2>
            <p>Props are passed to components similarly to how attributes are passed to HTML elements.</p>
            <pre><code>
function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
}

const element = <Welcome name="Sara" />;
            </code></pre>
        </section>
        <section>
            <h2>Default Props</h2>
            <p>You can define default props using the `defaultProps` property on the component.</p>
            <pre><code>
class Welcome extends React.Component {
    static defaultProps = {
        name: 'Stranger'
    };

    render() {
        return <h1>Hello, {this.props.name}</h1>;
    }
}

const element = <Welcome />;
            </code></pre>
        </section>
    </main>
    <footer>
        <p>&copy; 2024 React.js Guide</p>
    </footer>
</body>
</html>
Example of Index File (index.html)
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React.js Guide</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>React.js Guide</h1>
    </header>
    <nav>
        <ul>
            <li><a href="01-introduction/index.html">Introduction to React</a></li>
            <li><a href="02-advanced-topics/context-api.html">Context API</a></li>
            <li><a href="02-advanced-topics/react-router.html">React Router</a></li>
            <li><a href="02-advanced-topics/react-redux.html">React Redux</a></li>
        </ul>
    </nav>
    <footer>
        <p>&copy; 2024 React.js Guide</p>
    </footer>
</body>
</html>
This structure will help you organize your React.js notes in a clear and accessible way, similar to the approach used by W3Schools. Each file in the 01-introduction and 02-advanced-topics folders will cover a specific topic, making it easier for users to navigate and learn. Feel free to customize and expand the content as needed!